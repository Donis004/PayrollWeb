@model ContratoViewModel

@{
    ViewData["Title"] = "Agregar Contrato";
    var contratos = ViewBag.Contratos as List<ContratoViewModel>;
    decimal mayorSueldoBase = contratos != null && contratos.Count > 0 ? contratos.Max(c => c.SueldoBase) : 0;
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-delete-later">
        @TempData["Error"]
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-delete-later">
        @TempData["Success"]
    </div>
}

<h2>Agregar Contrato</h2>

<form action="/Contrato/CrearContrato" method="post">
    <input type="hidden" asp-for="IdEmpleado" value="@ViewBag.Empleado.IdEmpleado" />
    <input type="hidden" asp-for="IdPuesto" />
    <input type="hidden" asp-for="IdCategoria" />
    <input type="hidden" asp-for="IdContrato" value="0" />
    <input type="hidden" asp-for="Vigente" value="S" />

    <!-- Selector de Puesto -->
    <div class="form-group">
        <label asp-for="Puesto">Puesto:</label>
        <select asp-for="Puesto" class="form-control" id="puestoSelect">
            @foreach (var puesto in ViewBag.Puestos)
            {
                if (puesto.SueldoBase >= mayorSueldoBase)
                {
                    <option value="@puesto.NombrePuesto" data-categoria="@puesto.Categoria" data-sueldo="@puesto.SueldoBase" data-id-puesto="@puesto.IdPuesto" data-id-categoria="@puesto.IdCategoria">
                        @puesto.NombrePuesto
                    </option>
                }
            }
        </select>
        <span asp-validation-for="Puesto" class="text-danger"></span>
    </div>

    <!-- Categoría (no editable) -->
    <div class="form-group">
        <label asp-for="Categoria">Categoría:</label>
        <input asp-for="Categoria" class="form-control" id="categoriaInput" readonly />
    </div>

    <!-- Sueldo Base (no editable) -->
    <div class="form-group">
        <label asp-for="SueldoBase">Sueldo Base:</label>
        <input asp-for="SueldoBase" class="form-control" id="sueldoBaseInput" readonly />
    </div>

    <!-- Fecha Alta -->
    <div class="form-group">
        <label asp-for="FechaAlta">Fecha Alta:</label>
        <input asp-for="FechaAlta" class="form-control" type="date" id="fechaAltaInput" />
        <span asp-validation-for="FechaAlta" class="text-danger"></span>
    </div>

    <!-- Fecha Baja -->
    <div class="form-group">
        <label asp-for="FechaBaja">Fecha Baja:</label>
        <input asp-for="FechaBaja" class="form-control" type="date" id="fechaBajaInput" />
        <span asp-validation-for="FechaBaja" class="text-danger"></span>
    </div>

    <!-- Tipo de Contrato -->
    <div class="form-group">
        <label asp-for="TipoContrato">Tipo de Contrato:</label>
        <input asp-for="TipoContrato" id="tipoContrato" class="form-control" readonly value="Indefinido" />
        <span asp-validation-for="TipoContrato" class="text-danger"></span>
    </div>

    <!-- Motivo -->
    <div class="form-group">
        <label for="motivoInput">Motivo:</label>
        <input type="text" id="motivoInput" name="Motivo" class="form-control" placeholder="Ingrese el motivo de la creación del contrato" />
    </div>



    <button type="submit" class="btn btn-success">Guardar Contrato</button>
    <a href="@Url.Action("VerContratosEmpleado", "Contrato", new { idEmpleado = ViewBag.Empleado.IdEmpleado })" class="btn btn-secondary">Cancelar</a>
</form>

@section Scripts {
    <script>
        function actualizarDatos() {
            const puestoSelect = document.getElementById("puestoSelect");
            const categoriaInput = document.getElementById("categoriaInput");
            const sueldoBaseInput = document.getElementById("sueldoBaseInput");
            const idPuestoInput = document.getElementById("IdPuesto");
            const idCategoriaInput = document.getElementById("IdCategoria");

            const selectedOption = puestoSelect.options[puestoSelect.selectedIndex];
            categoriaInput.value = selectedOption.getAttribute("data-categoria");
            sueldoBaseInput.value = parseFloat(selectedOption.getAttribute("data-sueldo"));
            idPuestoInput.value = selectedOption.getAttribute("data-id-puesto");
            idCategoriaInput.value = selectedOption.getAttribute("data-id-categoria");
        }

        function actualizarTipoContrato() {
            const fechaBajaInput = document.getElementById("fechaBajaInput");
            const tipoContratoInput = document.getElementById("tipoContrato");
            tipoContratoInput.value = fechaBajaInput.value ? "Definido" : "Indefinido";
        }

        function configurarFechaBaja() {
            const fechaAltaInput = document.getElementById("fechaAltaInput");
            const fechaBajaInput = document.getElementById("fechaBajaInput");

            // Cuando se selecciona una fecha de alta
            fechaAltaInput.addEventListener("change", function () {
                if (fechaAltaInput.value) {
                    // Calcular la fecha mínima para la fecha de baja (un día después de la fecha de alta)
                    const fechaAlta = new Date(fechaAltaInput.value);
                    fechaAlta.setDate(fechaAlta.getDate() + 1); // Sumar un día
                    const fechaMinima = fechaAlta.toISOString().split("T")[0]; // Formato YYYY-MM-DD

                    // Establecer la fecha mínima en el campo de fecha de baja
                    fechaBajaInput.min = fechaMinima;

                    // Si la fecha de baja ya tiene un valor y es menor que la fecha mínima, limpiarla
                    if (fechaBajaInput.value && fechaBajaInput.value < fechaMinima) {
                        fechaBajaInput.value = "";
                    }
                } else {
                    // Si no hay fecha de alta, eliminar la restricción de fecha mínima
                    fechaBajaInput.removeAttribute("min");
                }
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            actualizarDatos(); // Actualizar datos iniciales
            actualizarTipoContrato(); // Actualizar tipo de contrato inicial
            configurarFechaBaja(); // Configurar la validación de fechas
        });

        document.getElementById("puestoSelect").addEventListener("change", actualizarDatos);
        document.getElementById("fechaBajaInput").addEventListener("change", actualizarTipoContrato);
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}